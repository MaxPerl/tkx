#!/usr/bin/perl -w

# pkxed - Simple editor

use strict;

use Tkx;
use File::Basename qw(basename);

Tkx::package_require("BWidget");

eval {
    Tkx::package_require("style");
    Tkx::style__use("as", -priority => 70);
};
if ($@) {
    $@ =~ s/ at .*//;
    print "Can't update style: $@";
}

# state
my $file = "";

# set up main window
my $mw = Tkx::widget->new(".");
my $sw = $mw->new_ScrolledWindow();
$sw->g_pack(
    -fill => "both",
    -expand => 1,
);

eval {
    Tkx::package_require("ctext");
};
my($t, $tw);
if (Tkx::package_provide("ctext")) {
    # A ctext's true text widget is a subwidget
    $t = $sw->new_ctext();
    $tw = $t->_mpath . ".t";
    # Consider adding ctext highlighting
}
else {
    $t = $tw = $sw->new_text();
}
$t->configure(
    -bd => 1,
    -undo => 1,
    -wrap => "none",
);

$sw->setwidget($t);

my $menu = mk_menu($mw);
$mw->configure(-menu => $menu);

$t->g_bind("<Button-3>", [\&post_menu, Tkx::Ev("%X", "%Y"), $menu]);

# Alternative menu binding for Mac OS X where not everybody have a Button-3
$t->g_bind("<Control-Button-1>", [\&post_menu, Tkx::Ev("%X", "%Y"), $menu])
    if $^O eq "darwin";

if (@ARGV) {
    Tkx::after_idle([\&load, $ARGV[0]])
}
else {
    new();
}

Tkx::MainLoop();
exit;

sub mk_menu {
    my $mw = shift;
    Tkx::option_add("*Menu.tearOff", 0);
    my $m = $mw->new_menu();
    my $fm = $m->new_menu();
    my $em = $m->new_menu();

    my $control = ($^O eq "darwin") ? "Command" : "Control";
    my $ctrl    = ($^O eq "darwin") ? "Command-" : "Ctrl+";

    $m->add_cascade(
	-label => "File",
	-menu => $fm,
    );
    $m->add_cascade(
	-label => "Edit",
	-menu => $em,
    );

    # File menu
    $fm->add_command(
        -label => "New",
	-accelerator => $ctrl . "N",
        -command => \&new,
    );
    Tkx::bind("all", "<$control-N>", \&new);
    $fm->add_command(
        -label => "Open...",
	-accelerator => $ctrl . "O",
        -command => \&my_open,
    );
    Tkx::bind("all", "<$control-O>", \&my_open);
    $fm->add_command(
        -label => "Save",
	-accelerator => $ctrl . "S",
        -command => \&save,
    );
    Tkx::bind("all", "<$control-S>", \&save);
    $fm->add_command(
        -label => "Save As...",
        -command => \&save_as,
    );
    $fm->add_command(
        -label => "Exit",
        -underline => 1,
	-accelerator => $ctrl . "Q",
        -command => [\&Tkx::destroy, $mw],
    );
    Tkx::bind("all", "<$control-Q>", [\&Tkx::destroy, $mw]);

    # Edit menu
    $em->add_command(
	-label => "Cut",
	-command => [\&Tkx::event_generate, $tw, "<<Cut>>"]
    );
    $em->add_command(
	-label => "Copy",
	-command => [\&Tkx::event_generate, $tw, "<<Copy>>"],
    );
    $em->add_command(
	-label => "Paste",
	-command => [\&Tkx::event_generate, $tw, "<<Paste>>"],
    );

    # Could add a Help -> About

    return $m;
}

sub post_menu {
    my($x, $y, $menu) = @_;
    Tkx::tk___popup($menu, $x, $y);
}

sub new {
    $t->delete("1.0", "end");
    set_file("");
}

sub my_open {
    my $f = Tkx::tk___getOpenFile(
        -parent => $mw,
    );
    load($f) if length $f;
}

sub load {
    my $f = shift;
    open(my $fh, "<:utf8", $f) || die "Can't open '$file': $!";
    $t->delete("1.0", "end");
    $t->insert("end", scalar do { local $/; <$fh> });
    set_file($f);
}

sub set_file {
    $file = shift;
    update_title();
}

sub save {
    return save_as() unless length $file;
    _save($file);
}

sub save_as {
    my $f = Tkx::tk___getSaveFile(
        -parent => $mw,
    );
    if (length $f) {
        _save($f);
        set_file($f);
    }
}

sub _save {
    my $f = shift;
    open(my $fh, ">", $f) || die "Can't open '$file': $!";
    print $fh $t->get("1.0", "end - 1 char");
    close($fh) || die "Can't write '$file': $!";
}

sub update_title {
    my $title;
    if (length $file) {
	$title = basename($file);
    }
    else {
	$title = "<no name>";
    }
    $title .= " - " . basename($0);
    $mw->g_wm_title($title);
}

__END__

=head1 NAME

tkxed - Simple editor

=head1 SYNOPSIS

 tkxed [<file>]

=head1 DESCRIPTION

The F<tkxed> program is a simple text editor implemented with the
C<Tkx> toolkit.  Its main purpose is to demonstrate how this kind of
application is written, so please take a look at its source code.

When the editor starts up it shows a blank page where you can start
entering text directly.  Right click in the editor window to bring up
the menu that allow you to load and save files.

If a file name is passed on the command line then the editor will
visit this file initially.

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Copyright 2005 ActiveState.  All rights reserved.

=head1 SEE ALSO

L<Tkx>
